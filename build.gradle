plugins {
    id "java"
    id "maven-publish"
    id "edu.wpi.first.GradleRIO" version "2023.3.2"
    id "com.diffplug.spotless" version "6.7.2"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

wpi.java.debugJni = false;

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven {
        url 'https://maven.photonvision.org/repository/internal'
    }
    maven {
        url 'https://maven.photonvision.org/repository/snapshots'
    }
}


dependencies {

    implementation 'edu.wpi.first.wpilibNewCommands:wpilibNewCommands-java:2023.3.2'

    implementation 'org.photonvision:PhotonLib-java:v2023.3.0'
    implementation 'org.photonvision:PhotonTargeting-java:v2023.3.0'

    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

group = 'io.github.tigerbotics7125'

publishing {
    publications {
        maven(MavenPublication) {
            groupId = "${groupId}"
            artifactId = "tigerlib"
            version = project.properties["version"]
            from components.java
        }
    }
}

spotless {
    enforceCheck false
    ratchetFrom 'origin/main'
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        licenseHeaderFile 'LICENSE_SHORTHAND'
        importOrder('\\#', 'io.github.tigerbotics7125.tigerLib', 'io.github.tigerbotics7125', 'edu.wpi', '')
        removeUnusedImports()
        // eclipse().configFile('java-formatter.xml')
        googleJavaFormat('1.10.0').aosp().reflowLongStrings()
    }
    groovyGradle {
        target fileTree('.') {
            include '**/*.gradle'
            exclude '**/build/**', '**/build-*/**'
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    format 'misc', {
        target fileTree('.') {
            include '**/*.md', '**/.gitignore', '**/*.yaml', '**/*.yml'
            exclude '**/build/**', '**/build-*/**'
        }
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
}


wpi.java.configureTestTasks(test)
test {
    useJUnitPlatform()
}

// gradle test logging
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
